worker_processes auto;
pid /var/run/nginx/nginx.pid;

load_module /usr/lib/nginx/modules/ngx_nchan_module.so;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Log format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /dev/stdout main;
    error_log /dev/stderr debug;

    upstream upstream_app {
        server 127.0.0.1:8000;
    }

    # MCP server configuration
    server {
        listen 80;
        server_name _;

        location ~ ^/mcp/([a-zA-Z0-9]+)$ {
            proxy_pass http://upstream_app/mcp/$1;
            proxy_set_header X-Forwarded-For $remote_addr;
            set $mcp_server_transport "websocket";
            if ($http_connection != "Upgrade") {
                set $mcp_server_transport "sse";
            }
            proxy_set_header X-MCP-Transport $mcp_server_transport;
        }

        location ~ ^/internal/([a-zA-Z0-9-]+)/([a-zA-Z0-9-]+)$ {
            internal;
            set $mcp_server_name $1;
            nchan_channel_id $2;
            nchan_subscriber websocket eventsource;
            # nchan_subscriber;
            nchan_subscribe_request /internal/mcp-process;
            nchan_publisher websocket;
            nchan_publisher_upstream_request /internal/mcp-process;
        }

        # MCP channel location, the path is the MCP server name
        location ~ ^/mcp/(.+)/(.+)$ {
            # Extract MCP server name
            set $mcp_server_name $1;
            nchan_channel_id $2;

            # Message storage
            nchan_store_messages on;
            nchan_message_timeout 1h;

            nchan_publisher_upstream_request /internal/mcp-process;
            nchan_publisher http;
        }
        
        # Internal endpoint for processing MCP requests
        location /internal/mcp-process {
            internal;  # Only accessible within nginx

            set $method 'endpoint';
            # Extract method from JSON request body
            if ($request_body ~* '"method"\s*:\s*"([^"]+)"') {
                set $method $1;
            }
            # Proxy to the Python Starlette backend
            proxy_pass http://upstream_app/mcp/$mcp_server_name/$nchan_channel_id/$method;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-MCP-Server-Name $mcp_server_name;
            proxy_set_header X-MCP-Transport $mcp_server_transport;
            proxy_set_header X-MCP-Session-ID $nchan_channel_id;
            proxy_set_header Content-Type $content_type;
            proxy_pass_request_body on;
        }
    }
}